name: Deploy to ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: flask-ecr-repo
  ECS_CLUSTER: flask-ecs-cluster
  ECS_SERVICE: flask-ecs-task-service-04lz7sta
  ECS_TASK_DEFINITION: flask-ecs-task

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2 # âœ… Use v2 for secrets
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}


      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI


      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment



  dast:
    name: Run DAST Scans
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - name: Wait for service to become available
        run: |
          for i in {1..30}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.ECS_APP_URL }}/health")
            if [ "$STATUS" = "200" ]; then
              echo "Service is up!"
              break
            fi
            echo "Waiting for service... ($i)"
            sleep 10
          done

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y zaproxy nuclei nikto curl jq

      - name: Run OWASP ZAP Scan
        run: |
          mkdir -p reports
          docker run -v $(pwd)/reports:/zap/wrk/:rw \
            ghcr.io/zaproxy/zaproxy:stable zap-full-scan.py \
            -t ${{ env.ECS_APP_URL }} \
            -r zap_report.html -w zap_report.md \
            -x zap_report.xml

      - name: Run Nuclei Scan
        run: |
          nuclei -u ${{ env.ECS_APP_URL }} -o reports/nuclei.txt

      - name: Run Nikto Scan
        run: |
          nikto -h ${{ env.ECS_APP_URL }} > reports/nikto.txt

      - name: Check HTTP Security Headers
        run: |
          curl -s -D - ${{ env.ECS_APP_URL }} -o /dev/null > reports/headers.txt

      - name: Upload OWASP ZAP SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/zap_report.xml

      - name: Upload reports as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dast-reports
          path: reports/

      - name: Write GitHub summary
        run: |
          echo "## DAST Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "- OWASP ZAP: [HTML Report](./reports/zap_report.html)" >> $GITHUB_STEP_SUMMARY
          echo "- Nuclei: $(wc -l < reports/nuclei.txt) findings" >> $GITHUB_STEP_SUMMARY
          echo "- Nikto: $(grep -c "OSVDB" reports/nikto.txt) findings" >> $GITHUB_STEP_SUMMARY
          echo "- Headers Checked: $(wc -l < reports/headers.txt) lines" >> $GITHUB_STEP_SUMMARY
